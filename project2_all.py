import asyncio
import logging
import requests
import translate as trans
from aiogram import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import *
from bs4 import BeautifulSoup as BS
from pyowm.owm import OWM
from config import *


def weather(city):
    owm=OWM(owm)
    mgr = owm.weather_manager()
    w = mgr.weather_at_place(city).weather
    return w


def time(city):
    r = requests.get(f'https://time100.ru/{city}')
    html = BS(r.content, 'lxml')
    time_now = html.find(class_="time")
    return time_now.text


def translate(text):
    translator = trans.Translator(from_lang='en', to_lang='ru')
    a = translator.translate(text).lower()
    if a == "–æ—á–∏—Å—Ç–∏—Ç—å":
        a = '—á–∏—Å—Ç–æ–µ –Ω–µ–±–æ'
    elif a == "–æ–±–ª–∞–∫–∞":
        a = '–æ–±–ª–∞—á–Ω–æ'
    return a


def isdigit(a):
    prob = "".join(a.split(":")).isdigit()
    try:
        if prob:
            if ':' in a:
                a = a.split(":")
                if len(a) == 2:
                    if 0 <= int(a[0]) <= 23:
                        if 0 <= int(a[1]) <= 59:
                            if len(a[0]) == 1:
                                if a[0] == '0':
                                    a[0] = '00'
                                else:
                                    a[0] = str(int(a[0]) + 12)
                            if len(a[1]) == 1:
                                if int(a[1]) <= 5:
                                    a[1] = "0" + a[1]
                                else:
                                    return False, a
                            return True, a
        return False, a
    except:
        return False, a


b1 = KeyboardButton('/–ú–µ–Ω—é')
b2 = KeyboardButton('/–ö–æ—à–∏–∫')
b3 = KeyboardButton('/–î–æ—Å—Ç–∞–≤–∫–∞')
b4 = KeyboardButton('/–Ü–Ω—Ñ–æ')
b5 = KeyboardButton('/–í—ñ–¥–≥—É–∫–∏')
key = ReplyKeyboardMarkup(resize_keyboard=True)
key.add(b1).row(b2, b3).row(b4, b5)

memory_box = MemoryStorage()
logging.basicConfig(level=logging.INFO)
loop = asyncio.get_event_loop()
bot = Bot(token=token, parse_mode="HTML")
dp = Dispatcher(bot, storage=memory_box)

users = []
basket = {}
basket_fullness = False
price = 0
info_for_dost = {}


@dp.message_handler(commands=['users'])
async def users_now(a):
    text = ''
    for i in users:
        text += f'{i}\n'
    if text:
        await bot.send_message(chat_id=admin_id, text=text)
    else:
        await bot.send_message(chat_id=admin_id, text="None")


@dp.message_handler(commands=['weather'])
async def weather_get(message: types.Message):
    city = message.get_args()
    if city == "":
        await message.answer("–ü—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /weather, —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª,\n–≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É.")
    else:
        try:
            w = weather(city)
            temp = w.temperature("celsius")['temp']
            t = time(city)
            if 'mymemory' in translate(w.status).lower():
                a = f'–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {t}, {round(temp)}‚ÑÉ'
            else:
                a = f'–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {t}, {round(temp)}‚ÑÉ –∏ {translate(w.status)}'
            await message.answer(a)
        except:
            await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞')


@dp.message_handler(commands=['start', 'help'])
async def start(message: types.Message):
    if message.text == "/start":
        if message.from_user.full_name not in users:
            users.append(message.from_user.full_name)
            await bot.send_message(chat_id=admin_id,
                                   text=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è.{users}")
        await bot.send_message(message.from_user.id,
                               f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}, —è –∫—Ä—É—Ç–∏–π –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É\n<b>'THE MIX SPIRIT OF WORLD'üòâ</b>",
                               reply_markup=key)
    if message.text == "/help":
        await bot.send_message(message.from_user.id,
                               "–í –º–µ–Ω–µ —î –æ—Å—å —Ç–∞–∫—ñ –∫–æ–º–∞–Ω–¥–∏:\n--/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!\n--/help - –î–æ–ø–æ–º–æ–≥–∞\n--/weather –º—ñ—Å—Ç–æ - –ü–æ–≥–æ–¥–∞ —Ç–∞ —á–∞—Å —É –º—ñ—Å—Ç—ñ")


@dp.message_handler(commands=['–ú–µ–Ω—é'])
async def menu(message: types.Message):
    key_menu = InlineKeyboardMarkup(row_width=3)
    b_m1 = InlineKeyboardButton(text='–ü–æ–ø—É–ª—è—Ä–Ω—ñ', callback_data='favorite')
    b_m2 = InlineKeyboardButton(text='–ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏', callback_data='at_first')
    b_m3 = InlineKeyboardButton(text='Wok —Ç–∞ –ø–∞—Å—Ç–∞', callback_data='pasta')
    b_m4 = InlineKeyboardButton(text='–ü—ñ—Ü—Ü–∞', callback_data='pizza')
    b_m5 = InlineKeyboardButton(text='–°—É—à—ñ', callback_data='sushi')
    b_m6 = InlineKeyboardButton(text='–°–∞–ª–∞—Ç–∏', callback_data='salaty')
    b_m7 = InlineKeyboardButton(text='–î–µ—Å–µ—Ä—Ç–∏', callback_data='deserty')
    b_m8 = InlineKeyboardButton(text='–ù–∞–ø–æ—ó', callback_data='napoi')
    b_m_all = InlineKeyboardButton(text='–í—Å–µ –º–µ–Ω—é', callback_data='all')
    key_menu.add(b_m1, b_m2, b_m3).add(b_m4, b_m5, b_m6).add(b_m7, b_m8).add(b_m_all)
    await bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—é –ø–æ–≤–Ω—ñ—Å—Ç—é:",
                           reply_markup=key_menu)


@dp.callback_query_handler(text='favorite')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='at_first')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='pasta')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='pizza')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='sushi')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='salaty')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='deserty')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='napoi')
async def favorite(callback: types.CallbackQuery):
    await offer(callback)
    await callback.answer()


@dp.callback_query_handler(text='all')
async def favorite(callback: types.CallbackQuery):
    a = ['favorite', 'at_first', 'pasta', 'pizza', 'sushi', 'salaty', 'deserty', 'napoi']
    for kind in a:
        await offer(callback, kind, True)
    await callback.answer()


@dp.message_handler(commands=['dish'])
async def offer(callback, kind='', all_is=False):
    if all_is:
        callback.data = kind
    r = requests.get(f"https://themix.com.ua/{callback.data}/")
    html = BS(r.content, 'html.parser')
    block_with_dishes = html.find_all(class_="product-item", limit=4)
    for i in block_with_dishes:
        name = i.find(class_="product-item-title").text.strip()
        price_ = i.find(class_="product-item-price-current").text.strip()[:-5]
        about = i.find(class_="text-dark d-none d-sm-block")
        img = open(f'D:\\Python_projects\\Kodland\\project2\\img_menu\\{name}.jpg', 'rb')
        text = '\n'
        if about is not None:
            about = about.text.strip()
            text = f'\n\n–û–ø–∏—Å:\n<i>{about}</i>\n'
        await callback.message.answer_photo(img)
        if '–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω' in name:
            name = '–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω'
        elif '–ì–∞—Ä–±—É–∑–æ–≤–∏–π –∫—Ä–µ–º-—Å—É–ø' in name:
            name = '–ì–∞—Ä–±—É–∑–æ–≤–∏–π –∫—Ä–µ–º-—Å—É–ø'
        elif '–ø—ñ–¥—Å–º–∞–∂–µ–Ω–∏–º –ª–æ—Å–æ—Å–µ–º' in name:
            name = '–°–∞–ª–∞—Ç –∑ –ª–æ—Å–æ—Å–µ–º —Ç–∞ –º—ñ–¥—ñ—è–º–∏'
        elif '–ê–≤—Ç–µ–Ω—Ç–∏—á–Ω–∏–π' in name:
            name = '–ì—Ä–µ—Ü—å–∫–∏–π —Å–∞–ª–∞—Ç'
        elif '–∫–æ–ø—á–µ–Ω–∏–º –≤—É–≥—Ä–µ–º' in name:
            name = '–°–∞–ª–∞—Ç –∑ –≤—É–≥—Ä–µ–º'
        elif '–ü—Ä–æ—Ñ—ñ—Ç—Ä–æ–ª—ñ' in name:
            name = '–ü—Ä–æ—Ñ—ñ—Ç—Ä–æ–ª—ñ'
        elif '–°–∏–ª—å–Ω–æ–≥–∞–∑–æ–≤–∞–Ω—ñ' in name:
            text = '\n'
            name = 'Pepsi'
        elif '–í–æ–¥–∞' in name:
            text = '\n'
            name = '–í–æ–¥–∞'
        await bot.send_message(callback.from_user.id, f"<b>{name}</b>{text}\n{price_} –≥—Ä–Ω",
                               reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                   InlineKeyboardButton(f'–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫', callback_data=f'add_{name}_{int(price_)}'),
                                   InlineKeyboardButton(f'–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—à–∏–∫–∞',
                                                        callback_data=f'del_{name}_{int(price_)}')))


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('add_'))
async def add_to_bag(callback: types.CallbackQuery):
    name = f'{callback.data.split("_")[1]}'
    price_ = f'{callback.data.split("_")[2]}'
    pers = callback.from_user.full_name
    if pers not in basket:
        basket[pers] = []
    for i in basket[pers]:
        if i[0] == name:
            basket[pers][basket[pers].index(i)][1] += 1
            break
    else:
        basket[pers] += [[name, 1, price_]]
    await callback.answer()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del_'))
async def del_to_bag(callback: types.CallbackQuery):
    name = f'{callback.data.split("_")[1]}'
    pers = callback.from_user.full_name
    if pers not in basket:
        await callback.answer('–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')
    else:
        for i in basket[pers]:
            if i[0] == name:
                if i[1] == 1:
                    basket[pers].remove(i)
                else:
                    basket[pers][basket[pers].index(i)][1] -= 1
                break
        else:
            await callback.answer('–£ –∫–æ—à–∏–∫—É –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó —Å—Ç—Ä–∞–≤–∏')
    await callback.answer()


@dp.message_handler(commands=['–ö–æ—à–∏–∫'])
async def bag(message: types.Message):
    global price, basket_fullness
    if message.from_user.full_name in basket:
        basket_fullness = True
        text = ""
        price = 0
        for i in basket[message.from_user.full_name]:
            price += int(i[1]) * int(i[2])
            text += f'–°—Ç—Ä–∞–≤–∞: {i[0]} | –ü–æ—Ä—Ü—ñ–π: {i[1]} | –í–∞—Ä—Ç—ñ—Å—Ç—å: {str(int(i[1]) * int(i[2]))}–≥—Ä–Ω\n{"-" * 69}\n'
        if text == "":
            basket_fullness = False
            await bot.send_message(message.from_user.id, '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')
        else:
            await bot.send_message(message.from_user.id,
                                   f'{message.from_user.full_name}:\n{text}<b>–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {price}–≥—Ä–Ω</b>')
    else:
        basket_fullness = False
        await bot.send_message(message.from_user.id, '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π')


@dp.message_handler(commands=['–î–æ—Å—Ç–∞–≤–∫–∞'])
async def delivery(message: types.Message):
    b_access = KeyboardButton("/–û—Ñ–æ—Ä–º–∏—Ç–∏")
    b_back = KeyboardButton("/–ù–∞–∑–∞–¥")
    key_access = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    key_access.row(b_access, b_back)
    await bag(message)
    if basket_fullness:
        if price >= 300:
            price_delivery = f"–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 300 –≥—Ä–Ω üòâ\n–î–æ —Å–ø–ª–∞—Ç–∏: {price}–≥—Ä–Ω"
        else:
            price_delivery = f'–î–æ—Å—Ç–∞–≤–∫–∞ –∫–æ—à—Ç—É—î: 30 –≥—Ä–Ω\n–î–æ —Å–ø–ª–∞—Ç–∏: {price + 30}–≥—Ä–Ω'
        await bot.send_message(message.from_user.id, price_delivery, reply_markup=key_access)


class FSMDost(StatesGroup):
    place = State()
    adress = State()
    time = State()


@dp.message_handler(commands=['–û—Ñ–æ—Ä–º–∏—Ç–∏'], state=None)
async def arrange(message: types.Message):
    await FSMDost.place.set()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞")
    info_for_dost[message.from_user.full_name] = []


@dp.message_handler(state=FSMDost.place)
async def place(message: types.Message):
    info_for_dost[message.from_user.full_name].append(message.text)
    await FSMDost.next()
    await message.answer("–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å —Å–≤–æ—é –∞–¥—Ä–µ—Å—É")


@dp.message_handler(state=FSMDost.adress)
async def adress(message: types.Message):
    info_for_dost[message.from_user.full_name].append(message.text)
    await FSMDost.next()
    await message.answer(
        "–í–∫–∞–∂—ñ—Ç—å —á–∞—Å, –Ω–∞ —è–∫–∏–π —Ç—Ä–µ–±–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —á–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ - <b>–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏</b>")


@dp.message_handler(state=FSMDost.time)
async def time_2(message: types.Message, state: FSMContext):
    a, b = isdigit(message.text)
    if a:
        info_for_dost[message.from_user.full_name].append(message.text)
        b_yes = KeyboardButton("/–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é")
        b_no = KeyboardButton("/–°–∫–∞—Å—É–≤–∞—Ç–∏")
        key_access = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        key_access.row(b_yes, b_no)
        await delivery(message)
        await message.answer(
            f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ {info_for_dost[message.from_user.full_name][1]} –º.{info_for_dost[message.from_user.full_name][0]} –≤ {":".join(b)}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?',
            reply_markup=key_access)
        del info_for_dost[message.from_user.full_name]
        await state.finish()
    else:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å.\n–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ - <b>–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏</b>")
        await FSMDost.last()


@dp.message_handler(commands=['–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é'])
async def okay(message: types.Message):
    await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ", reply_markup=key)
    del basket[message.from_user.full_name]


@dp.message_handler(commands=['–°–∫–∞—Å—É–≤–∞—Ç–∏', '–ù–∞–∑–∞–¥'])
async def back(message: types.Message):
    await message.answer("–û–∫–µ–π", reply_markup=key)


@dp.message_handler(commands=['–Ü–Ω—Ñ–æ'])
async def info(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ú–∏ –∑—ñ–±—Ä–∞–ª–∏ –Ω–∞–π–≤—ñ–¥–æ–º—ñ—à—ñ —Å—Ç—Ä–∞–≤–∏ –∑ —É—Å—å–æ–≥–æ —Å–≤—ñ—Ç—É —ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–ª–∏ –Ω–∞—à–∏–º –≥–æ—Å—Ç—è–º –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–º–∞–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –∫—É—Ö–æ–Ω—å.\
–¢—ñ–ª—å–∫–∏ —É –Ω–∞—Å –º–æ–∂–Ω–∞ –≤–æ–¥–Ω–æ—á–∞—Å –Ω–∞—Å–æ–ª–æ–¥–∏—Ç–∏—Å—è —Ö—É–º—É—Å–æ–º -–∑–∞–∫—É—Å–∫–æ—é —ñ–∑ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–æ—ó —Å—Ö—ñ–¥–Ω–æ—ó –∫—É—Ö–Ω—ñ;\
—Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—É–ø –¢–æ–º-–Ø–º, —â–æ –Ω–∞—Ä–æ–¥–∏–≤—Å—è —É –¢–∞—ó–ª–∞–Ω–¥—ñ —á–∏ —Å–∫—É—à—Ç—É–≤–∞—Ç–∏ –Ω–∞–π–≤—ñ–¥–æ–º—ñ—à–∏–π –∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏–π —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä;\
–∫–∏—Ç–∞–π—Å—å–∫–∏–π WOK, —ñ—Ç–∞–ª—ñ–π—Å—å–∫—É –ø–∞—Å—Ç—É —á–∏ —è–ø–æ–Ω—Å—å–∫–∏–π —Å–º–∞–∫ —Å—É–ø—É –†–∞–º–µ–Ω‚Ä¶\n\n\
–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è:\n\t\t<a href="https://themix.com.ua/"><b>THE MIX SPIRIT OF WORLD</b></a>\n\n\
–ê–¥—Ä–µ—Å–∞:\n\t\t<a href="https://goo.gl/maps/Gy7chnSSe5MCZEsM7">–ü—Ä–æ—Å–ø–µ–∫—Ç –¢–∞—Ä–∞—Å–∞ –®–µ–≤—á–µ–Ω–∫–∞, 25, –°—É–º–∏, –£–∫—Ä–∞—ó–Ω–∞</a>\n\
–ß–∞—Å —Ä–æ–±–æ—Ç–∏:\n\t\t–ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è —Å 11:00 –¥–æ 22:00\n\
–ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–≤\'—è–∑–∫—É:\n\t\t–¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:+380953489333">+380953489333</a>')


@dp.message_handler(commands=['–í—ñ–¥–≥—É–∫–∏'])
async def reviews(message: types.Message):
    r = requests.get("https://objor.com/7187-the-mix.html")
    html = BS(r.content, 'html.parser')
    block_with_reviews = html.find_all(class_="commennnnty", limit=6)
    block_with_reviews = block_with_reviews[4:]
    for i in block_with_reviews:
        name_and_date = i.find_all("span")
        name = name_and_date[0]
        date = name_and_date[1]
        sms = i.find(class_="commmmm")
        await bot.send_message(message.from_user.id,
                               f"<b>{name.text}</b>\n<i>{date.text[:len(date.text) - 5]}</i>\n\n{sms.text}")
    await bot.send_message(message.from_user.id,
                           "<a href='https://objor.com/7187-the-mix.html'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –≤—ñ–¥–≥—É–∫–∏</a>",
                           disable_web_page_preview=True)


async def send_to_admin(dp):
    await bot.send_message(chat_id=admin_id, text=f'–ë–æ—Ç –ø—Ä–∞—Ü—é—î')


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=send_to_admin, skip_updates=True)
